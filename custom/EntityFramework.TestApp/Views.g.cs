//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets58DC41AED2624FD139D2F31D4431E8ED6CF3E93E19647415A68C14FF5056CAC0))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets58DC41AED2624FD139D2F31D4431E8ED6CF3E93E19647415A68C14FF5056CAC0 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets58DC41AED2624FD139D2F31D4431E8ED6CF3E93E19647415A68C14FF5056CAC0()
        {
            this.EdmEntityContainerName = "Model";
            this.StoreEntityContainerName = "EntityFrameworkTestAppStoreContainer";
            this.HashOverMappingClosure = "1519b43a808ce9801d0c440cf7ff214c04f5f01af6d8264e1de47232b9735e4b";
            this.HashOverAllExtentViews = "9f29c99d6e81f294c4903cabd8f411c3f6643bd71977bab0c2bbd0206759ac50";
            this.ViewCount = 2;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for EntityFrameworkTestAppStoreContainer.TestTable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EntityFrameworkTestAppStoreContainer.TestTable", @"
    SELECT VALUE -- Constructing TestTable
        [EntityFramework.TestApp.Store.TestTable](T1.TestTable_ID, T1.TestTable_Enum1, T1.TestTable_Enum2)
    FROM (
        SELECT 
            T.ID AS TestTable_ID, 
            CAST(T.Enum1 AS [Edm.Int32]) AS TestTable_Enum1, 
            CAST(T.Enum2 AS [Edm.Int32]) AS TestTable_Enum2, 
            True AS _from0
        FROM Model.TestTables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for Model.TestTables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("Model.TestTables", @"
    SELECT VALUE -- Constructing TestTables
        [EntityFramework.TestApp.TestTable](T1.TestTable_ID, T1.TestTable_Enum1, T1.TestTable_Enum2)
    FROM (
        SELECT 
            T.ID AS TestTable_ID, 
            CAST(T.Enum1 AS [EntityFramework.TestApp.TestEnum]) AS TestTable_Enum1, 
            CAST(T.Enum2 AS [EntityFramework.TestApp.NativeEnum]) AS TestTable_Enum2, 
            True AS _from0
        FROM EntityFrameworkTestAppStoreContainer.TestTable AS T
    ) AS T1");
        }
    }
}
