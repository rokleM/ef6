//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace EntityFramework.TestApp
{
    partial class Model { partial void LoadExternalTypes(){} }

#region _Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class Model : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new Model object using the connection string found in the 'Model' section of the application configuration file.
        /// </summary>
        public Model() : base("name=Model", "Model")
        {
            this.ContextOptions.LazyLoadingEnabled = false;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Model object.
        /// </summary>
        private Model(string connectionString) : base(connectionString, "Model")
        {
            this.ContextOptions.LazyLoadingEnabled = false;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Model object.
        /// </summary>
        public Model(EntityConnection connection) : base(connection, "Model")
        {
            this.ContextOptions.LazyLoadingEnabled = false;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TestTable> TestTables
        {
            get
            {
                if ((_TestTables == null))
                {
                    _TestTables = base.CreateObjectSet<TestTable>("TestTables");
                }
                return _TestTables;
            }
        }
        private ObjectSet<TestTable> _TestTables;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TestTables EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTestTables(TestTable testTable)
        {
            base.AddObject("TestTables", testTable);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EntityFramework.TestApp", Name="TestTable")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TestTable : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TestTable object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        public static TestTable CreateTestTable(global::System.Int64 id)
        {
            TestTable testTable = new TestTable();
            testTable.ID = id;
            return testTable;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<TestEnum> Enum1
        {
            get
            {
                return _Enum1;
            }
            set
            {
                OnEnum1Changing(value);
                ReportPropertyChanging("Enum1");
                _Enum1 = (Nullable<TestEnum>)StructuralObject.SetValidValue((Nullable<int>)value, "Enum1");
                ReportPropertyChanged("Enum1");
                OnEnum1Changed();
            }
        }
        private Nullable<TestEnum> _Enum1;
        partial void OnEnum1Changing(Nullable<TestEnum> value);
        partial void OnEnum1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<NativeEnum> Enum2
        {
            get
            {
                return _Enum2;
            }
            set
            {
                OnEnum2Changing(value);
                ReportPropertyChanging("Enum2");
                _Enum2 = (Nullable<NativeEnum>)StructuralObject.SetValidValue((Nullable<int>)value, "Enum2");
                ReportPropertyChanged("Enum2");
                OnEnum2Changed();
            }
        }
        private Nullable<NativeEnum> _Enum2;
        partial void OnEnum2Changing(Nullable<NativeEnum> value);
        partial void OnEnum2Changed();

        #endregion

    }

    #endregion

    #region Enums
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="EntityFramework.TestApp", Name="NativeEnum")]
    [DataContractAttribute()]
    public enum NativeEnum : int
    {
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EnumMemberAttribute()]
        Start = 2,
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EnumMemberAttribute()]
        End = 3
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEnumTypeAttribute(NamespaceName="EntityFramework.TestApp", Name="TestEnum")]
    [DataContractAttribute()]
    public enum TestEnum : int
    {
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EnumMemberAttribute()]
        First = 1,
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EnumMemberAttribute()]
        Second = 2
    }

    #endregion

	#region Truncations

				partial class Model
				{
					static System.Text.Encoding dbEncoding;

					partial void
					OnContextCreated()
					{
						LoadExternalTypes();
						OnBeforeDbEncodingSet();
						if(dbEncoding == null) {
							dbEncoding = OL.Core.EncodingExtensions.GetEncoding(Connection.GetCodePage());
						}
						OnAfterDbEncodingSet();
						OnAfterContextCreated();
					}

					partial void
					LoadExternalTypes();

					partial void
					OnBeforeDbEncodingSet();

					partial void
					OnAfterDbEncodingSet();

					partial void
					OnAfterContextCreated();

					internal static string
					DefaultEntityConnectionString { get;set; }

					internal static System.Text.Encoding
					DbEncoding
					{
						get { return dbEncoding ?? (dbEncoding = OL.Core.EncodingExtensions.GetEncoding(GetDefaultSqlConnection().GetCodePage())); }
					}

					internal static System.Data.SqlClient.SqlConnection
					GetDefaultSqlConnection()
					{
						#if NETFRAMEWORK
						var settings = System.Configuration.ConfigurationManager
							.ConnectionStrings
							.Cast<System.Configuration.ConnectionStringSettings>()
							.FirstOrDefault(cs => cs.ProviderName == "System.Data.EntityClient")
						;
						var connectionString = settings.ConnectionString;
						#else
						System.Diagnostics.Contracts.Contract.Assert(DefaultEntityConnectionString != null, "Set Model.DefaultEntityConnectionString value.");
						var connectionString = DefaultEntityConnectionString;
						#endif
						var builder = new System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder(connectionString);
						return new System.Data.SqlClient.SqlConnection(builder.ProviderConnectionString);
					}
				}

				static partial class _ModelExtensions {
					internal static string TruncateStringProperty(this string value, string propertyName, int maxLength, bool unicode) {
						System.Diagnostics.Contracts.Contract.Assert(Model.DbEncoding != null, "Instantiate Model at least once to use TruncateStringProperty().");
						if(value != null) {
							if(unicode) {
								if(value.Length > maxLength) {
									return value.Substring(0, maxLength);
								}
							}
							else {
								var bytes = Model.DbEncoding.GetBytes(value);
								if(bytes.Length > maxLength) {
									return Model.DbEncoding.GetString(bytes, 0, maxLength);
								}
							}
						}
						return value;
					}

					internal static int GetCodePage(this System.Data.Common.DbConnection connection)
					{
						return
							(connection as System.Data.Entity.Core.EntityClient.EntityConnection)?.StoreConnection.GetCodePage()
						??	(connection as System.Data.SqlClient.SqlConnection                  )?.GetCodePage()
						??	0;
					}

					internal static int GetCodePage(this System.Data.SqlClient.SqlConnection connection)
					{
						var needsOpen = connection.State != System.Data.ConnectionState.Open;
						if(needsOpen) {
							connection.Open();
						}
						try {
							using(var command = connection.CreateCommand()) {
								command.CommandText = $"SELECT COLLATIONPROPERTY(CAST(DATABASEPROPERTYEX('{connection.Database}', 'Collation') as nvarchar(128)), 'CodePage')";
								return (int)command.ExecuteScalar();
							}
						}
						finally {
							if(needsOpen) {
								connection.Close();
							}
						}
					}
				}

	#endregion // Truncations
}
